# GraphQL

## Вступ

&#160;&#160;&#160;&#160;**GraphQL** - це мова запитів для API, а так ж середовище для виконання цих запитів з нашими існуючими даними. 
GraphQL надає повне і зрозумілий опис даних в твоєму API. Він дає клієнтам (браузерам) можливість вимагати від сервера тільки саме те, 
що потрібно, і повертає тільки запитані дані, і нічого більше.

### Мета

&#160;&#160;&#160;&#160;Головною метою для GraphQL полягала в тому, 
щоб усунути багато недоліків з якими стикалися розробники мобільних додатків при роботі з REST API.

## Основы
&#160;&#160;&#160;&#160;У двох словах GraphQL це **синтаксис, який описує, як запрошувати дані**, і, в основному, використовується клієнтом для завантаження даних із сервера. GraphQL має три основні характеристики:

- Дозволяє клієнтам точно вказати, які дані йому потрібні.
- Облегчає агрегацію даних з кількох джерел.
- Використовує систему типів для опису даних.

## Короткий огляд продукту

&#160;&#160;&#160;&#160;У типовій реалізації REST клієнт збирає дані шляхом доступу до декількох кінцевих точок; тобто спочатку потрібно викликати кінцеву точку, щоб отримати вихідні дані користувача, а потім виконати окремий виклик, щоб отримати всі його властивості. GraphQL обробляє це по-іншому. Специфікація того, що може бути запитано, лежить на боці клієнта, і при запиті конкретних даних, GraphQL сервер буде відповідати тільки запитаними даними.

## Передумови
&#160;&#160;&#160;&#160;Перед початком роботи вам слід встановити Node v6, хоча приклади в основному повинні працювати і в попередніх версіях Node. У цьому посібнику ми не використовуватимемо жодних мовних функцій, що вимагають транпіляції, але ми будемо використовувати деякі функції ES6, такі як Promises, класи та функції жирних стрілок, тому, якщо ви з ними не знайомі, можливо, ви захочете прочитати про них спочатку.

Щоб створити новий проект та встановити GraphQL.js у поточному каталозі:

>npm init
>npm install graphql --save

## Написання коду 
&#160;&#160;&#160;&#160;Для обробки запитів GraphQL нам потрібна схема, яка визначає тип `Query`, і нам потрібен корінь API з функцією, яка називається “resolve” для кожної кінцевої точки API. Для API, який просто повертає “Hello world!”, Ми можемо помістити цей код у файл з іменем `server.js`:

```js
1 var { graphql, buildSchema } = require('graphql');
2  
3 // Construct a schema, using GraphQL schema language
4 var schema = buildSchema(`
5   type Query {
6    hello: String
7   }
8 `);
9  
10 // The root provides a resolver function for each API endpoint
11 var root = {
12  hello: () => {
13    return 'Hello world!';
14  },
15 };
16 
17 // Run the GraphQL query '{ hello }' and print out the response
18 graphql(schema, '{ hello }', root).then((response) => {
19  console.log(response);
20 });
```

Якщо ви запускаєте це за допомогою:
>node server.js

Ви повинні побачити роздруковану відповідь GraphQL:
```js
{ data: { hello: 'Hello world!' } }
```

Вітаємо! Ви щойно виконали запит GraphQL!

&#160;&#160;&#160;&#160;Для практичних програм вам, ймовірно, доведеться запускати запити GraphQL із сервера API, а не виконувати GraphQL за допомогою інструменту командного рядка. Щоб використовувати GraphQL для сервера API через HTTP, ознайомтесь із пунктом Запуск Express ExpressQL Server.

## Запуск Express GraphQL Server
&#160;&#160;&#160;&#160;Найпростіший спосіб запустити сервер API GraphQL - використовувати Express GraphQL, популярний фреймворк веб-додатків для Node.js. Вам потрібно буде встановити дві додаткові залежності:

>npm install express express-graphql graphql --save

&#160;&#160;&#160;&#160;Давайте модифікуємо наш приклад «привіт світ» таким чином, щоб це був сервер API, а не сценарій, який запускає один запит. Ми можемо використовувати модуль 'express' для запуску веб-сервера, і замість того, щоб виконувати запит безпосередньо за допомогою функції `graphql`, ми можемо використовувати бібліотеку `express-graphql` для монтування сервера API GraphQL на кінцевій точці “/graphql” HTTP endpoint:

```js
1  var express = require('express');
2  var { graphqlHTTP } = require('express-graphql');
3  var { buildSchema } = require('graphql');
4 
5  // Construct a schema, using GraphQL schema language
6  var schema = buildSchema(`
7   type Query {
8     hello: String
9    }
10 `);
11
12 // The root provides a resolver function for each API endpoint
13 var root = {
14   hello: () => {
15     return 'Hello world!';
16   },
17 };
18 
19 var app = express();
20 app.use('/graphql', graphqlHTTP({
21   schema: schema,
22   rootValue: root,
23   graphiql: true,
24 }));
25 app.listen(4000);
26 console.log('Running a GraphQL API server at http://localhost:4000/graphql');
```

Ви можете запустити цей сервер GraphQL за допомогою:
>node server.js

&#160;&#160;&#160;&#160;Оскільки ми налаштували **graphqlHTTP** за допомогою **graphiql: true**, ви можете використовувати інструмент GraphiQL для видачі запитів GraphQL вручну. Якщо ви переходите у веб-браузері до `http://localhost:4000/graphql`, ви побачите інтерфейс, що дозволяє вводити запити. Це повинно виглядати так:

<img src="https://i2.paste.pics/cf62de69ab84a8efea01aee00db6ff2d.png" width="810" height="448" alt="Screenshot">

&#160;&#160;&#160;&#160;Цей знімок екрану показує, як було видано запит GraphQL {hello}, який дає результат{data: { hello: 'Hello world!' }}. GraphiQL - чудовий інструмент для налагодження та перевірки сервера, тому ми рекомендуємо запускати його щоразу, коли ваша програма перебуває в режимі розробки.

## Підсумки
&#160;&#160;&#160;&#160;На цьому етапі ви дізналися, як запускати сервер GraphQL та як використовувати інтерфейс GraphiQL для видачі запитів. Наступним кроком є навчитися видавати запити GraphQL із коду клієнта. 

<a href="https://github.com/maxmai02/jace-dps-express">Посилання на репозиторий</a>
